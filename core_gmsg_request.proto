syntax = "proto3";

import "core_data.proto";

package YGOpen.Core;

message GMsgRequest
{
	// bool player = 1; // probably not needed
	bool stripped = 2;
	oneof GMsgRequest
	{
		bool retry = 3; // the last answer was not understood by the core

		SelectCmd select_cmd = 4;
		SelectYesNo select_yesno = 5;
		SelectOption select_option = 6;
		SelectCards select_cards = 7;
		SortCards sort_cards = 8;
		SelectPlaces select_places = 9;
		SelectPosition select_position = 10;
		bool select_rps = 11; // ask player for rock, papper or scissors
		
	}
}

// Encapsulates:
// MSG_SELECT_BATTLECMD
// MSG_SELECT_IDLECMD
message SelectCmd
{
	enum CmdType
	{
		COMMAND_BATTLE = 0;
		COMMAND_IDLE = 1;
	}

	CmdType type = 1;

	// Can the player go to these phases?
	//bool able_to_dp = 2;  // Draw Phase // NOTE: UNUSED
	//bool able_to_sp = 3;  // Standby Phase // NOTE: UNUSED
	//bool able_to_mp1 = 4; // Main Phase 1 // NOTE: UNUSED
	bool able_to_bp = 5;  // Battle Phase
	bool able_to_mp2 = 6; // Main Phase 2
	bool able_to_ep = 7;  // End Phase

	// Usable cards
	repeated Data.CardInfo cards_w_effect = 8; // Cards anywhere in the field that can activate a ignition effect
	repeated Data.CardInfo cards_can_attack = 9; // Cards that can declare an attack
	repeated Data.CardInfo cards_summonable = 10; // Cards that can be either Normal or Tribute summoned
	repeated Data.CardInfo cards_spsummonable = 11; // Cards that can be Special summoned (inherent)
	repeated Data.CardInfo cards_repositionable = 12; // Cards that can change Battle Position
	repeated Data.CardInfo cards_msetable = 13; // Cards that can be set on a Monster Zone
	repeated Data.CardInfo cards_ssetable = 14; // Cards that can be set on a Spell/Trap Zone
}

// Encapsulates:
// MSG_SELECT_EFFECTYN
// MSG_SELECT_YESNO
message SelectYesNo
{
	oneof SelectYesNo
	{
		// Asks for a effect by a specific card on a specific zone
		// Example: From [Monster Zone] activate "Elemental HERO Stratos"?
		Data.CardInfo card = 1;
		// Asks for a effect
		// Example: Banish "Return of the Dragon Lords" from the Graveyard instead?
		Data.EffectDesc effect = 2;
	}
}

// Encapsulates:
// MSG_SELECT_OPTION
message SelectOption
{
	repeated Data.EffectDesc effects = 3;
}

// Encapsulates:
// MSG_SELECT_CARD
// MSG_SELECT_TRIBUTE
// MSG_SELECT_UNSELECT_CARD
// MSG_SELECT_COUNTER
message SelectCards
{
	enum SelectionType
	{
		SELECTION_EFFECT = 0;
		SELECTION_TRIBUTE = 1;
		SELECTION_SELECT_UNSELECT = 2;
		SELECTION_COUNTER = 3;
	}
	
	SelectionType type = 1;
	
	// Can the player cancel the selection completely?
	bool can_cancel = 2;
	// Can the player finish the selection as is?
	bool can_accept = 3;
	// Minimum cards to select
	int32 min = 4;
	// Maximum cards to select
	int32 max = 5;
	
	// Counter type and number of counters the player
	// can distribute among the selectable cards
	Data.Counter counter = 6;
	
	// Cards that can be selected
	repeated Data.CardInfo cards_selectable = 10;
	
	// Cards that are selected and can be unselected
	repeated Data.CardInfo cards_unselectable = 11;
}

// Encapsulates:
// MSG_SORT_CARD
// MSG_SORT_CHAIN
message SortCards
{
	// Cards that you must place in the order you want them to activate
	Data.CardInfo cards_to_sort = 1;
}

// Encapsulates:
// MSG_SELECT_PLACE
// MSG_SELECT_DISFIELD
message SelectPlaces
{
	message Place
	{
		bool controller = 1;
		int32 location = 2;
		int32 sequence = 3;
	}
	
	//Reason reason = 1;
	
	// Minimum places to select
	int32 min = 2;
	
	// Places to select from
	repeated Place places = 3;
}

// Encapsulates:
// MSG_SELECT_POSITION
message SelectPosition
{
	// Has code of the card
	// and available positions to choose from AND'd on positions variable
	Data.CardInfo card = 1;
}
