syntax = "proto3";

package YGOpen.Core;

import "core_msg_request.proto";
import "core_msg_information.proto";

// Core Game message that requires an answer from the player, see MsgSpecific.
// Can be stripped in case selections or choices have non-public cards on it
// Not saved into replay.
message Request
{
	bool stripped = 2; // used 2 to maintain consistency with MsgSpecific
	oneof Request
	{
		bool retry = 3; // the last answer was REJECTED by the core
		Msg.SelectCmd select_cmd = 4;
		Msg.SelectYesNo select_yesno = 5;
		Msg.SelectOption select_option = 6;
		Msg.SelectCards select_cards = 7;
		Msg.SortCards sort_cards = 8;
		Msg.SelectPlaces select_places = 9;
		Msg.SelectPosition select_position = 10;
		bool select_rps = 11; // ask player for rock, papper or scissors
		Msg.DeclareCard declare_card = 12;
		Msg.DeclareMisc declare_misc = 13;
		Msg.SelectToChain select_to_chain = 14;
	}
}

// Core Game message about information of the game, they do not require an answer.
// Sent to specific player or everyone, either stripped or unstripped.
// Saved unstripped to a replay server-side.
message Information
{
	bool stripped = 2; // used 2 to maintain consistency with MsgSpecific
	oneof Information
	{
		// Critical messages: these messages MUST be interpreted by the client,
		// otherwise, they will end up on a invalid game state
		Msg.UpdateCard update_card = 3;
		Msg.AddCard add_card = 4;
		Msg.RemoveCard remove_card = 5;
		Msg.Draw draw = 6;
		Msg.SwapCards swap_cards = 7;
		Msg.ShuffleLocation shuffle_location = 8;
		Msg.ShuffleSetCards shuffle_set_cards = 9;
		Msg.CounterChange counter_change = 10;
		Msg.DisableZones disable_zones = 11;
		Msg.LpChange lp_change = 12;
		Msg.ChainAction chain_action = 13;
		Msg.NewTurn new_turn = 14;
		Msg.NewPhase new_phase = 15;
		Msg.MiscAction misc_action = 16;
		Msg.SwapPlayer swap_player = 17;
		// Non-critical messages: These messages can be safely ignored by
		// clients without getting a invalid game state
		Msg.Result result = 18;
		Msg.Hint hint = 19;
		Msg.Win win = 20;
		Msg.ConfirmCards confirm_cards = 21;
		Msg.SummonCard summon_card = 22;
		Msg.SelectedCards selected_cards = 23;
		Msg.OnAttack on_attack = 24;
		Msg.CardHint card_hint = 25;
		Msg.PlayerHint player_hint = 26;
		uint32 match_killer = 27; // card code for match killer
	}
}

// Core Game message for a specific player.
// Must always have player set.
message Specific
{
	uint32 player = 1;
	oneof Specific
	{
		Request request = 2;
		Information information = 3;
	}
}

// Base Game Message, it can hold any type of message in the game
message AnyMsg
{
	oneof AnyMsg
	{
		Specific specific = 1;
		Information information = 2;
		//MsgBoardState board_state = 3; // Probably needed in the future
	}
	//repeated Core.Msg.Query before_msg_query = 4;
	//repeated Core.Msg.Query after_msg_query = 5;
}
